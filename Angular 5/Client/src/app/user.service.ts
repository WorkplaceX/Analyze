import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';

@Injectable()
export class UserService {

  constructor(private http: HttpClient) { }

  /** Json-Server (https://github.com/typicode/json-server) supports server side paging, sorting and filtering out of the box.
   * (Switch mode between server side or client side sorting) */
  public sortIsClient = true;

  /** Returns UserList. */
  getUserList(sortColumnName: string, sortIsDesc: boolean): Observable<Typicode.User[]> {
    // http://jsonplaceholder.typicode.com/users uses Json-Server as backend (https://github.com/typicode/json-server).
    // Json-Server supports server side paging, sorting and filtering.
    let sortParam = '_sort=' + sortColumnName;
    let sortAscDesc = 'asc';
    if (sortIsDesc === true) {
      sortAscDesc = 'desc';
    }
    sortParam += '&_order=' + sortAscDesc;
    return this.http.get('http://jsonplaceholder.typicode.com/users' + '?' + sortParam) as Observable<Typicode.User[]>;
  }

  /** Returns single User. */
  getUser(userId: number): Observable<Typicode.User> {
    return this.http.get('http://jsonplaceholder.typicode.com/users/' + userId) as Observable<Typicode.User>;
  }

  /** Starting from Angular 5, do not use or implement pipes for sorting. https://angular.io/guide/pipes quote: "The Angular team and
   * many experienced Angular developers strongly recommend moving filtering and sorting logic into the component itself." */
  sortName(name1, name2, sortIsDesc: boolean) {
    let result = 0;
    if (name1 < name2) {
      result = 1;
    }
    if (name1 > name2) {
      result = -1;
    }
    if (result !== 0 && !sortIsDesc) {
      result = result * -1;
    }
    return result;
  }
}

/** Strongly typed http://jsonplaceholder.typicode.com/users generated by http://json2ts.com/
 * Install Visual Studio Code Extension "Angular Language Service" to enable autocompletion on Angular html templates.
 * See also: https://angular.io/guide/language-service */
export declare module Typicode {
  export interface User {
    id: number;
    name: string;
    username: string;
    email: string;
    address: Address;
    phone: string;
    website: string;
    company: Company;
}

export interface Geo {
      lat: string;
      lng: string;
  }

  export interface Address {
      street: string;
      suite: string;
      city: string;
      zipcode: string;
      geo: Geo;
  }

  export interface Company {
      name: string;
      catchPhrase: string;
      bs: string;
  }
}
